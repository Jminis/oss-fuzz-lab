/out/fuzz_obconversion_smiles -rss_limit_mb=2560 -timeout=25 fuzz_obconversion_smiles_poc/openbabel--fuzz_obconversion_smiles--crash-3fd7f021731ef426fbc4f93fb1d04c82-2023-09-25-21:10:32 # /tmp/fuzz_obconversion_smiles_corpus < /dev/null
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3740174018
INFO: Loaded 1 modules   (132840 inline 8-bit counters): 132840 [0x17cff00, 0x17f05e8), 
INFO: Loaded 1 PC tables (132840 PCs): 132840 [0x13de730,0x15e55b0), 
/out/fuzz_obconversion_smiles: Running 1 inputs 1 time(s) each.
Running: fuzz_obconversion_smiles_poc/openbabel--fuzz_obconversion_smiles--crash-3fd7f021731ef426fbc4f93fb1d04c82-2023-09-25-21:10:32
=================================================================
[1m[31m==11==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000434 at pc 0x0000007c29b5 bp 0x7ffe3b3d7330 sp 0x7ffe3b3d7328
[1m[0m[1m[34mREAD of size 4 at 0x602000000434 thread T0[1m[0m
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x7c29b4 in OpenBabel::OBSmilesParser::ParseSmiles(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/openbabel/src/formats/smilesformat.cpp:568:20
    #1 0x7bcc7c in OpenBabel::OBSmilesParser::SmiToMol(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/openbabel/src/formats/smilesformat.cpp:394:10
    #2 0x7bc2eb in OpenBabel::SMIBaseFormat::ReadMolecule(OpenBabel::OBBase*, OpenBabel::OBConversion*) /src/openbabel/src/formats/smilesformat.cpp:380:15
    #3 0x6c0c4c in OpenBabel::OBConversion::Read(OpenBabel::OBBase*, std::__1::basic_istream<char, std::__1::char_traits<char> >*) /src/openbabel/src/obconversion.cpp:870:30
    #4 0x631166 in LLVMFuzzerTestOneInput /src/openbabel/test/fuzz/fuzz_obconversion.cpp:26:12
    #5 0x502883 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #6 0x4edfe2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #7 0x4f388c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #8 0x51cdc2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x7fcdffb91082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 1878e6b475720c7c51969e69ab2d276fae6d1dee)
    #10 0x4e41ad in _start (/out/fuzz_obconversion_smiles+0x4e41ad)

DEDUP_TOKEN: OpenBabel::OBSmilesParser::ParseSmiles(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)--OpenBabel::OBSmilesParser::SmiToMol(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)--OpenBabel::SMIBaseFormat::ReadMolecule(OpenBabel::OBBase*, OpenBabel::OBConversion*)
[1m[32m0x602000000434 is located 0 bytes to the right of 4-byte region [0x602000000430,0x602000000434)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    #0 0x62e85d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x695305 in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:245:10
    #2 0x695305 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:271:10
    #3 0x695305 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x695305 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x695305 in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:306:29
    #6 0x695305 in void std::__1::vector<int, std::__1::allocator<int> >::__push_back_slow_path<int>(int&&) /usr/local/bin/../include/c++/v1/vector:1526:49
    #7 0x7d429b in push_back /usr/local/bin/../include/c++/v1/vector:1558:9
    #8 0x7d429b in OpenBabel::OBSmilesParser::ParseSimple(OpenBabel::OBMol&) /src/openbabel/src/formats/smilesformat.cpp:1044:13
    #9 0x7bec78 in OpenBabel::OBSmilesParser::ParseSmiles(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/openbabel/src/formats/smilesformat.cpp:526:14
    #10 0x7bcc7c in OpenBabel::OBSmilesParser::SmiToMol(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/openbabel/src/formats/smilesformat.cpp:394:10
    #11 0x7bc2eb in OpenBabel::SMIBaseFormat::ReadMolecule(OpenBabel::OBBase*, OpenBabel::OBConversion*) /src/openbabel/src/formats/smilesformat.cpp:380:15
    #12 0x6c0c4c in OpenBabel::OBConversion::Read(OpenBabel::OBBase*, std::__1::basic_istream<char, std::__1::char_traits<char> >*) /src/openbabel/src/obconversion.cpp:870:30
    #13 0x631166 in LLVMFuzzerTestOneInput /src/openbabel/test/fuzz/fuzz_obconversion.cpp:26:12
    #14 0x502883 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #15 0x4edfe2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #16 0x4f388c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #17 0x51cdc2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #18 0x7fcdffb91082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 1878e6b475720c7c51969e69ab2d276fae6d1dee)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openbabel/src/formats/smilesformat.cpp:568:20 in OpenBabel::OBSmilesParser::ParseSmiles(OpenBabel::OBMol&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
Shadow bytes around the buggy address:
  0x0c047fff8030: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x0c047fff8040: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m04[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m04[1m[0m
  0x0c047fff8050: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m04[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x0c047fff8060: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m07[1m[0m
  0x0c047fff8070: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m07[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[35mfd[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m02[1m[0m [1m[31mfa[1m[0m
=>0x0c047fff8080: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[35mfd[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m[[1m[0m04[1m[0m][1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x0c047fff8090: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x0c047fff80a0: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x0c047fff80b0: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x0c047fff80c0: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x0c047fff80d0: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           [1m[0m00[1m[0m
  Partially addressable: [1m[0m01[1m[0m [1m[0m02[1m[0m [1m[0m03[1m[0m [1m[0m04[1m[0m [1m[0m05[1m[0m [1m[0m06[1m[0m [1m[0m07[1m[0m 
  Heap left redzone:       [1m[31mfa[1m[0m
  Freed heap region:       [1m[35mfd[1m[0m
  Stack left redzone:      [1m[31mf1[1m[0m
  Stack mid redzone:       [1m[31mf2[1m[0m
  Stack right redzone:     [1m[31mf3[1m[0m
  Stack after return:      [1m[35mf5[1m[0m
  Stack use after scope:   [1m[35mf8[1m[0m
  Global redzone:          [1m[31mf9[1m[0m
  Global init order:       [1m[36mf6[1m[0m
  Poisoned by user:        [1m[34mf7[1m[0m
  Container overflow:      [1m[34mfc[1m[0m
  Array cookie:            [1m[31mac[1m[0m
  Intra object redzone:    [1m[33mbb[1m[0m
  ASan internal:           [1m[33mfe[1m[0m
  Left alloca redzone:     [1m[34mca[1m[0m
  Right alloca redzone:    [1m[34mcb[1m[0m
==11==ABORTING
