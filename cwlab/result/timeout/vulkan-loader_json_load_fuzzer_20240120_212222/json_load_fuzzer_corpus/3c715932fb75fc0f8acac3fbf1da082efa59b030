{
    "file_format_version": "1.2.0",
    "layer": {
        "test_code_description": "This file is literally a copy of an in{
    "file_format_version": "1.2.0",
    "layer": {
        "test_code_description": "This file is literally a copy of an installed Validation layer manifest file for linux. It was chosen because it contains a lot of complex json structures that aren't present in the test framework's generated json, so exercises cJSON better",
        "name": "VK_LAYER_KHRONOS_validation",
        "type": "GLOBAL",
        "library_path": "libVkLayer_khronos_validation.so",
        "api_version": "1.3.231",
        "implementation_version": "1",
        "description": "Khronos Validation Layer",
        "introduction": "The main, comprehensive Khronos validation layer.\n\nVulkan is an Explicit API, enabling direct control over how GPUs actually work. By design, minimal error checking is done inside a Vulkan driver. Applications have full control and responsibility for correct operation. Any errors in how Vulkan is used can result in a crash. \n\nThe Khronos Valiation Layer can be enabled to assist development by enabling developers to verify their applications correctly use the Vulkan API.",
        "platforms": [
            "WINDOWS",
            "LINUX",
            "ANDROID",
            "MACOS"
        ],
        "url": "https://vulkan.lunarg.com/doc/sdk/latest/windows/khronos_validation_layer.html",
        "installed Validation layer manifest file for linux. It was chosen because it contains a lot of complex json structures that aren't present in the test framework's generated json, so exercises cJSON better",
        "name": "VK_LAYER_KHRONOS_validation",
        "type": "GLOBAL",
        "library_path": "libVkLayer_khronos_validation.so",
        "api_version": "1.3.231",
        "implementation_version": "1",
        "description": "Khronos Validation Layer",
        "introduction": "The main, comprehensive Khronos validation layer.\n\nVulkan is an Explicit API, enabling direct control over how GPUs actually work. By design, minimal error checking is done inside a Vulkan driver. Applications have full control and responsibility for correct operation. Any errors in how Vulkan is used can result in a crash. \n\nThe Khronos Valiation Layer can be enabled to assist development by enabling developers to verify their applications correctly use the Vulkan API.",
        "platforms": [
            "WINDOWS",
            "LINUX",
            "ANDROID",
            "MACOS"
        ],
        "url": "https://vulkan.lunarg.com/doc/sdk/latest/windows/khronos_validation_layer.html",
        "instance_extensions": [
            {
                "name": "VK_EXT_debug_report",
                "spec_version": "9"
            },
            {
                "name": "VK_EXT_debug_utils",
                "spec_version": "1"
            },
            {
                "name": "VK_EXT_validation_features",
                "spec_version": "2"
            }
        ],
        "device_extensions": [
            {
                "name": "VK_EXT_debug_marker",
                "spec_version": "4",
                "entrypoints": [
                    "vkDebugMarkerSetObjectTagEXT",
                    "vkDebugMarkerSetObjectNameEXT",
                    "vkCmdDebugMarkerBeginEXT",
                    "vkCmdDebugMarkerEndEXT",
                    "vkCmdDebugMarkerInsertEXT"
                ]
            },
            {
                     "default": [
                        "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT"
                    ]
                },
                {
                    "key": "enables",
                    "label": "Enables",
                    "description": "Setting an option here will enable specialized areas of validation",
                    "type": "FLAGS",
                    "env": "VK_LAYER_ENABLES",
                    "flags": [
                        {
                            "key": "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT",
                                                   "description": "Activating this feature enables the output of warnings related to ARM-specific misuse of the API, but which are not explicitly prohibited by the specification.",
                            "platforms": [
                                "WINDOWS",
                                "LINUX",
                                "MACOS",
                                "ANDROID"
                            ]
                        },
                        {
                            "key": "VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_AMD",
                            "label": "AMD-specific best practices",
                            "description": "Adds check for spec-conforming but non-ideal code on AMD GPUs.",
                            "platforms": [
                                "WINDOWS",
                                "LINUX",
                                "MACOS"
                            ]
                        },
                        {
                            "key": "VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_NVIDIA",
                            "label": "NVIDIA-specific best practices",
                            "description": "Activating this feature enables the output of warnings related to NVIDIA-specific misuse of the API, but which are not explicitly prohibited by the specification.",
                            "platforms": [
                                "WINDOWS",
                                "LINUX",
                                "ANDROID"
                            ]
                        }
                    ],
                    "default": []
                },
                {
                    "key": "fine_grained_locking",
                    "env": "VK_LAYER_FINE_GRAINED_LOCKING",
                    "label": "Fine Grained Locking",
                    "description": "Enable fine grained locking for Core Validatstance_extensions": [
            {
                "name": "VK_EXT_debug_report",
                "spec_version": "9"
            },
            {
                "na{
    "file_format_version": "1.2.0",
    "settings_array": [
        {
            "app_zer",
                "/work/settings_fuzzer"
            ],
            "stderr_log": ["all", "info", "warn", "perf", "error", "debug", "layer", "driver", "validation"],
            "log_locations": [
                {
                    "destinations":["/tmp "vkCmdDebugMarkerBeginEXT",
                    "vkCmdDebugMarkerEndEXT",
                    "vkCmdDebugMarkerInsertEXT"
                ]
            },
            {
                "name": "VK_EXT_validation_cache",
         etValidationCacheDataEXT",
                    "vkMergeValidationCachvalue"
            },
            "app_keys": ["/out/settings_fuzze                  "key": "enables",
                            "value": [
                                "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT",
                                "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT"
                            ]
                        },
                        {
                            "key": "disables",
                    ion, which should        "value": [
                                "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT",
                                "VK_VALIDATION_FEATURE_DISABLE                "value": [
   }                             "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT"
                            ]
                        },
                        {
                            "key": "disables",
                            "value": [
                                      "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT",
                                "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT",
                                "VK_VALIDATION_FEATURE_DISABLE_CORE_ improve performance in multithreaded applications. This setting allows the optimization to be disabled for debugging.",
   CH 